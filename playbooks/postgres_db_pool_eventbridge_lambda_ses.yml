---
- name: Setup PostgreSQL, EventBridge, Lambda, and SES with Monitoring
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    # Load values from the JSON file
    json_data: "{{ lookup('file', json_file_path) | from_json }}"
    
    # AWS and Database configuration variables
    aws_region: "{{ json_data.aws_region | default('us-east-1') }}"
    aws_access_key: "{{ json_data.aws_access_key_id }}"
    aws_secret_key: "{{ json_data.aws_secret_access_key }}"
    db_instance_identifier: "{{ json_data.db_instance_identifier | default('dev-trade-feed-db') }}"
    db_name: "{{ json_data.db_name | default('trade_feed_db') }}"
    db_port: "{{ json_data.db_port | default(5432) }}"
    db_user: "{{ json_data.master_username | default('defaultuser') }}"
    db_password: "{{ json_data.master_user_password | default('defaultpassword') }}"
    db_eventbridge_rule: "{{ json_data.db_eventbridge_rule | default('trade-feed-db-event-rule') }}"
    eventbridge_schedule_expression: "{{ json_data.eventbridge_schedule_expression | default('rate(15 minutes)') }}"
    lambda_function_name: "{{ json_data.lambda_function_name | default('lambda_fn_trade_feed_tables_counts_checker') }}"
    ses_email: "{{ json_data.ses_email | default('your-verified-email@example.com') }}"
    tables: "{{ json_data.tables | default([]) }}"

  tasks:
    - name: Determine the db_endpoint from RDS instance
      command: >
        aws rds describe-db-instances
        --db-instance-identifier "{{ db_instance_identifier }}"
        --region "{{ aws_region }}"
        --query "DBInstances[0].Endpoint.Address"
        --output text
      register: rds_endpoint

    - name: Fail if the DB endpoint was not found
      fail:
        msg: "The DB endpoint could not be determined for the instance identifier '{{ db_instance_identifier }}'. Ensure the database instance exists and is accessible."
      when: rds_endpoint.stdout == ""

    - name: Set db_endpoint variable
      set_fact:
        db_endpoint: "{{ rds_endpoint.stdout }}"

    - name: Print important values
      debug:
        msg:
          - "AWS Region: {{ aws_region }}"
          - "DB Name: {{ db_name }}"
          - "DB Endpoint: {{ db_endpoint }}"
          - "SES Email: {{ ses_email }}"
          - "Tables and Thresholds: {{ tables }}"

    - name: Check table counts
      community.postgresql.postgresql_query:
        db: "{{ db_name }}"
        query: "SELECT COUNT(*) FROM {{ item.name }};"
        login_host: "{{ db_endpoint }}"
        login_user: "{{ db_user }}"
        login_password: "{{ db_password }}"
        port: "{{ db_port }}"
      loop: "{{ tables }}"
      loop_control:
        loop_var: item
      register: table_counts

    - name: Evaluate thresholds and set fact if exceeded
      set_fact:
        exceeds_threshold: "{{ exceeds_threshold | default(false) or (item.query_result[0].count > item.item.threshold) }}"
      loop: "{{ table_counts.results }}"
      loop_control:
        loop_var: item

    - name: Fail if any table exceeds threshold
      fail:
        msg: "One or more tables have exceeded the threshold count."
      when: exceeds_threshold | default(false)

    - name: Send SES email if thresholds exceeded
      command: >
        aws ses send-email
        --region "{{ aws_region }}"
        --from "{{ ses_email }}"
        --destination "ToAddresses={{ ses_email }}"
        --message "Subject={Data='Threshold Exceeded Alert'},Body={Text={Data='One or more tables in the database {{ db_name }} have exceeded their threshold count.'}}"
      when: exceeds_threshold | default(false)
